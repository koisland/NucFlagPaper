from copy import deepcopy
from os.path import join

ASM_FA = "HG002/assembly/hg002v1.1.fasta"
HIFI_DIR = join("HG002", "hifi")
GLOB_HIFI = join(HIFI_DIR, "{fname}.fastq.gz")
HIFI_FNAMES = glob_wildcards(GLOB_HIFI).fname

DOWNSAMPLE_PERC = [0.50, 0.33]

NUM = list(range(1, config.get("max_num", 3)))
LEN = config.get(
    "lengths",
    [10, 500, 1_000, 10_000, 50_000]
)
MTYPES = config.get(
    "mtype",
    ["misjoin", "false-duplication", "gap", "inversion"]
)
ALL_MTYPES = []
for mtype in MTYPES:
    if mtype == "break":
        lengths = [1]
    else:
        lengths = LEN
    for num in NUM:
        for l in lengths:
            ALL_MTYPES.append((mtype, num, l))

ALL_MTYPES_SEEDED = dict(zip(range(len(ALL_MTYPES)), ALL_MTYPES))

# with open()

# Run NucFlag on original assembly on original reads.
configfile: "misasim/config_nucflag_negative_ctrl.yaml"


# Subset
# Normal
config["samples"].append(
    {
        "name": f"HG002-subset",
        "asm_fa": join("results", "misasim", "asm", "HG002_chr10_cens.fa"),
        "reads": expand(join("results", "misasim", "reads", "{fname}.fastq.gz"), fname=HIFI_FNAMES),
        "config": "misasim/nucflag.toml"
    }
)
# Downsampled.
config["samples"].extend(
    [
        {
            "name": f"HG002-subset-{perc}",
            "asm_fa": join("results", "misasim", "asm", "HG002_chr10_cens.fa"),
            "reads": expand(join("results", "misasim", "reads", "{fname}-{perc}.fastq.gz"), fname=HIFI_FNAMES, perc=perc),
            "config": "misasim/nucflag.toml"
        }
        for perc in DOWNSAMPLE_PERC
    ]
)
# Misassemblies
config["samples"].extend(
    [
        {
            "name": f"HG002-{mtype}-{num}-{length}",
            "asm_fa": expand(join("results", "misasim", "simulated", "{seed}.fa"), seed=seed)[0],
            "reads": expand(join("results", "misasim", "reads", "{fname}.fastq.gz"), fname=HIFI_FNAMES),
            "config": "misasim/nucflag.toml"
        }
        for seed, (mtype, num, length) in ALL_MTYPES_SEEDED.items()
    ]
)
# Misassemblies
config["samples"].extend(
    [
        {
            "name": f"HG002-{perc}-{mtype}-{num}-{length}",
            "asm_fa": expand(join("results", "misasim", "simulated", "{seed}.fa"), seed=seed)[0],
            "reads": expand(join("results", "misasim", "reads", "{fname}-{perc}.fastq.gz"), fname=HIFI_FNAMES, perc=perc),
            "config": "misasim/nucflag.toml"
        }
        for perc in DOWNSAMPLE_PERC
        for seed, (mtype, num, length) in ALL_MTYPES_SEEDED.items()
    ]
)
module NucFlag:
    snakefile:
        "Snakemake-NucFlag/workflow/Snakefile"    
    config:
        config

use rule * from NucFlag


rule split_asm:
    input:
        fa=ASM_FA,
        fai=f"{ASM_FA}.fai",
    output:
        join("results", "flagger", "seq", "HG002_{hap}.fa")
    conda:
        "env.yaml"
    shell:
        """
        seqtk subseq {input.fa} <(grep {wildcards.hap} {input.fai} | cut -f 1) > {output}
        """


module Flagger:
    snakefile:
        "flagger.smk"    
    config:
        {
            "output_dir": join("results", "flagger", "original"),
            "samples": [
                {
                    "sm_id": "HG002_original",
                    "asm_1": expand(rules.split_asm.output, hap="MATERNAL")[0],
                    "asm_2": expand(rules.split_asm.output, hap="PATERNAL")[0],
                    "alpha": "flagger/misc/alpha_tsv/HiFi_DC_1.2/alpha_optimum_trunc_exp_gaussian_w_16000_n_50.HiFi_DC_1.2_DEC_2024.v1.1.0.tsv",
                    "reads": expand(GLOB_HIFI, fname=HIFI_FNAMES),
                }
            ]
        }

use rule * from Flagger


# Extract alignments restricted to region.bed
rule extract_aln_regions:
    input:
        bam=expand(join(config["output_dir"], "{sm}.bam"), sm=["HG002"]),
        bed=join("misasim", "region.bed")
    output:
        bam=join("results", "misasim", "hg002v1.1_chr10_cen.bam"),
        bam_idx=join("results", "misasim", "hg002v1.1_chr10_cen.bam.bai"),
    params:
        extend_region=500_000
    conda:
        "env.yaml"
    log:
        "logs/misasim/extract_aln_regions.log"
    shell:
        """
        samtools view -L \
            <(awk '{{ print $1, $2-{params.extend_region}, $3+{params.extend_region}}}' \
            {input.bed}) {input.bam} -bh -o {output.bam} 2> {log}
        samtools index {output.bam} 2> {log}
        """


rule extract_read_names:
    input:
        rules.extract_aln_regions.output.bam
    output:
        join("results", "misasim", "cen_reads.txt")
    conda:
        "env.yaml"
    shell:
        """
        samtools view {input} | cut -f 1 | sort | uniq > {output}
        """


# Speed up alignment by subsetting reads to region.
rule extract_reads:
    input:
        reads_list=rules.extract_read_names.output,
        reads=GLOB_HIFI
    output:
        join("results", "misasim", "reads", "{fname}.fastq.gz")
    conda:
        "env.yaml"
    log:
        "logs/misasim/extract_reads_{fname}.log"
    shell:
        """
        seqtk subseq {input.reads} {input.reads_list} | bgzip > {output} 2> {log}
        """


# Downsample reads by 100%, 75%, 50%
rule downsample_reads:
    input:
        rules.extract_reads.output
    output:
        join("results", "misasim", "reads", "{fname}-{perc}.fastq.gz")
    params:
        sample="{perc}"
    conda:
        "env.yaml"
    log:
        "logs/misasim/downsample_reads_{fname}_{perc}.log"
    shell:
        """
        seqtk sample {input} {params.sample} | bgzip > {output}
        """

rule extract_hg002_chr10_cens:
    input:
        asm=config["samples"][0]["asm_fa"],
        bed=join("misasim", "region.bed"),
    output:
        fa=join("results", "misasim", "asm", "HG002_chr10_cens.fa"),
        fai=join("results", "misasim", "asm", "HG002_chr10_cens.fa.fai"),
    log:
        "logs/misasim/extract_HG002_chr10_cens.log"
    conda:
        "env.yaml"
    shell:
        """
        seqtk subseq {input.asm} {input.bed} > {output.fa} 2> {log}
        samtools faidx {output.fa} 2>> {log}
        """

# Generate misassemblies
module misasim:
    snakefile:
        "misasim.smk"    
    config:
        {
            "fa": rules.extract_hg002_chr10_cens.output.fa,
            "seed_opts": ALL_MTYPES_SEEDED
        }

use rule * from misasim


FLAGGER_CFG = {
    "output_dir": join("results", "flagger", "simulated"),
    "samples": [
        {
            "sm_id": f"HG002_misasim_{perc}_{mtype}_{num}_{length}",
            "asm_1": expand(rules.split_asm_misasim.output, seed=seed, hap="MATERNAL")[0],
            "asm_2": expand(rules.split_asm_misasim.output, seed=seed, hap="PATERNAL")[0],
            "alpha": "flagger/misc/alpha_tsv/HiFi_DC_1.2/alpha_optimum_trunc_exp_gaussian_w_16000_n_50.HiFi_DC_1.2_DEC_2024.v1.1.0.tsv",
            "reads": expand(rules.downsample_reads.output, fname=HIFI_FNAMES, perc=perc),
        }
        for perc in DOWNSAMPLE_PERC
        for seed, (mtype, num, length) in ALL_MTYPES_SEEDED.items()
    ]
}

module FlaggerSubsetMisasim:
    snakefile:
        "flagger.smk"
    config:
        FLAGGER_CFG

use rule * from FlaggerSubsetMisasim as misasim_*


# TODO: Test minimap2 lr:hqae, winnowmap map-ont, pbmm2 CCS, pbmm2 SUBREAD. First 10 seeds.
# TODO: Calculate precision and recall on all n seeds.

rule all:
    input:
        # Original.
        rules.nucflag.input,
        # rules.flagger.input,

        # Subset to centromere
        rules.extract_hg002_chr10_cens.output,
        
        # Misassembly
        expand(rules.downsample_reads.output, fname=HIFI_FNAMES, perc=DOWNSAMPLE_PERC),
        rules.misasim_all.input,
        
        # rules.misasim_flagger.input

    default_target: True
