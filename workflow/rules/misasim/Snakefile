from copy import deepcopy
from os.path import join
from collections import defaultdict


"""
{
    Literal["output_dir"]: str,
    Literal["logs_dir"]: str,
    Literal["benchmarks_dir"]: str,
    Literal["samples"]: {
        str: {
            Literal["asm_fa"]: str,
            Literal["reads"]: list[str],
            Literal["preset"]: str
        }
    }
}
"""
SAMPLES = config["samples"]

OUTPUT_DIR = config["output_dir"]
NUCFLAG_OUTPUT_DIR = join(OUTPUT_DIR, "nucflag")
MISASIM_OUTPUT_DIR = join(OUTPUT_DIR, "simulated")

LOG_DIR = config["logs_dir"]
NUCFLAG_LOG_DIR = join(LOG_DIR, "nucflag")
MISASIM_LOG_DIR = join(LOG_DIR, "simulated")

BENCHMARK_DIR = config["benchmarks_dir"]
NUCFLAG_BENCHMARK_DIR = join(BENCHMARK_DIR, "nucflag")
MISASIM_BENCHMARK_DIR = join(BENCHMARK_DIR, "simulated")


wildcard_constraints:
    sm="|".join(SAMPLES.keys()),


NUM = 100
LEN = config.get("lengths", [1, 2, 10, 100, 1_000, 10_000, 50_000])
MTYPES = config.get("mtype", ["misjoin", "false_duplication", "inversion"])
DOWNSAMPLE_PERC = [0.50, 0.33]
ALL_MTYPES_SEEDED = {
    hash((mtype, NUM, length)): {"mtype": mtype, "number": NUM, "length": length}
    for mtype in MTYPES
    for length in LEN
}

# Run NucFlag on original assembly on original reads.
nf_config_base = {
    "samples": [{"name": sm, **cfg} for sm, cfg in SAMPLES.items()],
    "output_dir": NUCFLAG_OUTPUT_DIR,
    "output_pileup": False,
    "logs_dir": NUCFLAG_LOG_DIR,
    "benchmarks_dir": NUCFLAG_BENCHMARK_DIR,
    "threads_aln": 24,
    "mem_aln": "50G",
    "processes_nucflag": 12,
    "threads_nucflag": 12,
    "mem_nucflag": "50G",
    "samtools_view_flag": 2308,
}


# Downsample reads by 100%, 75%, 50%
rule downsample_reads:
    input:
        reads=lambda wc: SAMPLES[wc.sm]["reads"],
    output:
        join(OUTPUT_DIR, "reads", "{sm}_{perc}.fastq.gz"),
    params:
        sample="{perc}",
    conda:
        "../../envs/misasim.yaml"
    log:
        join(LOG_DIR, "downsample_reads_{sm}_{perc}.log"),
    shell:
        """
        seqtk sample <(zcat -f {input}) {params.sample} | bgzip > {output}
        """


# Generate misassemblies
module misasim:
    snakefile:
        "misasim.smk"
    config:
        {
            "output_dir": MISASIM_OUTPUT_DIR,
            "log_dir": MISASIM_LOG_DIR,
            "samples": {
                sm: {
                    "fa": SAMPLES[sm]["asm_fa"],
                    "seed_opts": ALL_MTYPES_SEEDED,
                }
                for sm in SAMPLES.keys()
            },
        }


use rule * from misasim as ms_*


# Misassemblies
nf_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "reads": SAMPLES[sm]["reads"],
            "config": SAMPLES[sm]["config"],
        }
        for sm in SAMPLES.keys()
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)

# Downsampled
nf_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}",
            "asm_fa": cfg["asm_fa"],
            "reads": expand(rules.downsample_reads.output, sm=sm, perc=perc),
            "config": SAMPLES[sm]["config"],
        }
        for sm, cfg in SAMPLES.items()
        for perc in DOWNSAMPLE_PERC
    ]
)
# Misassemblies downsampled
nf_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "reads": expand(rules.downsample_reads.output, sm=sm, perc=perc),
            "config": SAMPLES[sm]["config"],
        }
        for sm in SAMPLES.keys()
        for perc in DOWNSAMPLE_PERC
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)


module NucFlag:
    snakefile:
        "Snakemake-NucFlag/workflow/Snakefile"
    config:
        nf_config_base


use rule * from NucFlag


flagger_config_base = {
    "output_dir": join("results", "flagger"),
    "benchmarks_dir": join("benchmarks", "flagger"),
    "logs_dir": join("logs", "flagger"),
    "samples": [
        {
            "name": sm,
            "asm_fa": SAMPLES[sm]["asm_fa"],
            "bam": join(NUCFLAG_OUTPUT_DIR, f"{sm}.bam"),
            "alpha": SAMPLES[sm]["flagger_config"],
        }
        for sm in SAMPLES.keys()
    ],
}

# Misassemblies
flagger_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "bam": join(
                NUCFLAG_OUTPUT_DIR,
                f"{sm}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}.bam",
            ),
            "alpha": SAMPLES[sm]["flagger_config"],
        }
        for sm in SAMPLES.keys()
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)

# Downsampled
flagger_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}",
            "asm_fa": cfg["asm_fa"],
            "bam": join(NUCFLAG_OUTPUT_DIR, f"{sm}_{perc}.bam"),
            "alpha": SAMPLES[sm]["flagger_config"],
        }
        for sm, cfg in SAMPLES.items()
        for perc in DOWNSAMPLE_PERC
    ]
)

# Misassemblies downsampled
flagger_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "bam": join(
                NUCFLAG_OUTPUT_DIR,
                f"{sm}_{perc}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}.bam",
            ),
            "alpha": SAMPLES[sm]["flagger_config"],
        }
        for sm in SAMPLES.keys()
        for perc in DOWNSAMPLE_PERC
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)


module Flagger:
    snakefile:
        "flagger.smk"
    config:
        flagger_config_base


use rule * from Flagger


inspector_config_base = {
    "output_dir": join("results", "inspector"),
    "benchmarks_dir": join("benchmarks", "inspector"),
    "logs_dir": join("logs", "inspector"),
    "samples": [
        {
            "name": sm,
            "asm_fa": SAMPLES[sm]["asm_fa"],
            "bam": join(NUCFLAG_OUTPUT_DIR, f"{sm}.bam"),
            "datatype": "nanopore" if "ont" in sm else "hifi",
        }
        for sm in SAMPLES.keys()
    ],
}

# Misassemblies
inspector_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "bam": join(
                NUCFLAG_OUTPUT_DIR,
                f"{sm}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}.bam",
            ),
            "datatype": "nanopore" if "ont" in sm else "hifi",
        }
        for sm in SAMPLES.keys()
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)

# Downsampled
inspector_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}",
            "asm_fa": cfg["asm_fa"],
            "bam": join(NUCFLAG_OUTPUT_DIR, f"{sm}_{perc}.bam"),
            "datatype": "nanopore" if "ont" in sm else "hifi",
        }
        for sm, cfg in SAMPLES.items()
        for perc in DOWNSAMPLE_PERC
    ]
)

# Misassemblies downsampled
inspector_config_base["samples"].extend(
    [
        {
            "name": f"{sm}_{perc}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}",
            "asm_fa": join(MISASIM_OUTPUT_DIR, sm, f"{seed}.fa"),
            "bam": join(
                NUCFLAG_OUTPUT_DIR,
                f"{sm}_{perc}_{cfg['mtype']}-{cfg['number']}-{cfg['length']}.bam",
            ),
            "datatype": "nanopore" if "ont" in sm else "hifi",
        }
        for sm in SAMPLES.keys()
        for perc in DOWNSAMPLE_PERC
        for seed, cfg in ALL_MTYPES_SEEDED.items()
    ]
)


module Inspector:
    snakefile:
        "inspector.smk"
    config:
        inspector_config_base


use rule * from Inspector


# TODO: Calculate precision and recall on all n seeds.


rule all:
    input:
        rules.nucflag.input,
        rules.flagger.input,
        rules.inspector.input,
    default_target: True
