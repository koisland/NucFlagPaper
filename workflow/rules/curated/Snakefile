include: "../common.smk"


OUTPUT_DIR = config["output_dir"]
BENCHMARK_DIR = config["benchmarks_dir"]
LOG_DIR = config["logs_dir"]
HIFI = config["hifi"]
CONFIG = config["config"]
FLAGGER_ALPHA = config["alpha"]


VCFS = {
    "v1.0.1": "https://github.com/marbl/HG002-issues/raw/refs/heads/main/patches/already_applied/hg002v1.0.1_to_hg002v1.1.vcf.gz",
    "v0.9": "https://github.com/marbl/HG002-issues/raw/refs/heads/main/patches/already_applied/hg002v0.9_to_hg002v1.0.vcf.gz",
    "v0.7": "https://github.com/marbl/HG002-issues/raw/refs/heads/main/patches/already_applied/hg002v0.7_to_hg002v0.9.vcf.gz",
}
ASSEMBLIES = {
    "v1.0.1": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v1.0.1.fasta.gz",
    "v0.9": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v0.9.fasta.gz",
    "v0.7": "https://s3-us-west-2.amazonaws.com/human-pangenomics/T2T/HG002/assemblies/hg002v0.7.fasta",
}


rule download_vcf:
    output:
        join(OUTPUT_DIR, "data", "vcf", "{version}.vcf.gz"),
    params:
        url=lambda wc: VCFS[wc.version],
    shell:
        """
        wget {params.url} -O {output}
        """


rule convert_vcf_to_bed:
    input:
        rules.download_vcf.output,
    output:
        os.path.join(OUTPUT_DIR, "data", "{version}_truth.bed"),
    shell:
        """
        zcat -f {input} | grep -v "#" | awk -v OFS="\\t" '{{
            print $1, $2, $2 + length($4), $4"-"$5, 0, $3, $2, $2 + length($4), "0,0,0"
        }}' > {output}
        """


rule download_curated_asm:
    output:
        fa=join(OUTPUT_DIR, "data", "asm", "{version}.fa.gz"),
        fai=join(OUTPUT_DIR, "data", "asm", "{version}.fa.gz.fai"),
    params:
        url_asm=lambda wc: ASSEMBLIES[wc.version],
    shell:
        """
        wget {params.url_asm} -O {output.fa}
        wget {params.url_asm}.fai -O {output.fai}
        """


config = {
    "samples": [
        {
            "name": f"HG002_{version}",
            "asm_fa": expand(rules.download_curated_asm.output.fa, version=version)[0],
            "reads": HIFI,
            "config": CONFIG,
        }
        for version, data in ASSEMBLIES.items()
    ],
    "output_dir": OUTPUT_DIR,
    "output_pileup": False,
    "logs_dir": LOG_DIR,
    "benchmarks_dir": BENCHMARK_DIR,
    "threads_aln": 24,
    "mem_aln": "50G",
    "processes_nucflag": 24,
    "threads_nucflag": 12,
    "mem_nucflag": "50G",
    # Filter unmapped, non-primary, and supplementary alignments.
    "samtools_view_flag": 2308,
}


module NucFlagCurated:
    snakefile:
        "../Snakemake-NucFlag/workflow/Snakefile"
    config:
        config


use rule * from NucFlagCurated as versioned_*


flagger_config = {
    "output_dir": join("results", "curated", "flagger"),
    "benchmarks_dir": join("benchmarks", "curated", "flagger"),
    "logs_dir": join("logs", "curated", "flagger"),
    "samples": [
        {
            "name": f"HG002_{version}",
            "asm_fa": expand(rules.download_curated_asm.output.fa, version=version)[0],
            "bam": expand(
                rules.versioned_aln_merge_read_asm_alignments.output.alignment,
                sm=f"HG002_{version}",
            ),
            "alpha": FLAGGER_ALPHA,
        }
        for version, data in ASSEMBLIES.items()
    ],
}

inspector_config = {
    "output_dir": join("results", "curated", "inspector"),
    "benchmarks_dir": join("benchmarks", "curated", "inspector"),
    "logs_dir": join("logs", "curated", "inspector"),
    "samples": [
        {
            "name": f"HG002_{version}",
            "asm_fa": expand(rules.download_curated_asm.output.fa, version=version)[0],
            "bam": expand(
                rules.versioned_aln_merge_read_asm_alignments.output.alignment,
                sm=f"HG002_{version}",
            ),
            "datatype": "hifi",
        }
        for version, data in ASSEMBLIES.items()
    ],
}


module Inspector:
    snakefile:
        "../inspector.smk"
    config:
        inspector_config


use rule * from Inspector as versioned_*


module Flagger:
    snakefile:
        "../flagger.smk"
    config:
        flagger_config


use rule * from Flagger as versioned_*


def get_bed_files(wc):
    if wc.tool == "nucflag":
        return expand(
            rules.versioned_check_asm_nucflag.output.misassemblies,
            sm=f"HG002_{wc.version}",
        )
    elif wc.tool == "flagger":
        return expand(rules.versioned_run_flagger.output, sm=f"HG002_{wc.version}")
    elif wc.tool == "inspector":
        return expand(rules.versioned_merge_calls.output, sm=f"HG002_{wc.version}")
    else:
        raise ValueError(f"Invalid tool. {wc.tool}")


rule calculate_precision_recall:
    input:
        script="workflow/scripts/metrics/calculate_precision_recall_curated.py",
        test_bed=get_bed_files,
        truth_bed=rules.convert_vcf_to_bed.output,
    output:
        summary=join(OUTPUT_DIR, "summary", "{tool}_{version}.tsv"),
        missed_calls_dir=directory(
            join(OUTPUT_DIR, "summary", "{tool}_{version}_missed")
        ),
    conda:
        "../../envs/misasim.yaml"
    shell:
        """
        python {input.script} \
        -a {input.test_bed} \
        -b {input.truth_bed} \
        --output_dir_missed_calls {output.missed_calls_dir} > {output.summary}
        """


rule all:
    input:
        rules.versioned_nucflag.input,
        rules.versioned_flagger.input,
        rules.versioned_inspector.input,
        expand(rules.convert_vcf_to_bed.output, version=ASSEMBLIES.keys()),
        expand(
            rules.calculate_precision_recall.output,
            version=ASSEMBLIES.keys(),
            tool=["flagger", "inspector", "nucflag"],
        ),
    default_target: True
